schema {
  query: Query
  mutation: Mutation
}

type MyUser {
  id: ID!
  name: String!
  username: String!
  password: String!
}

type UsersResult {
  success: Boolean!
  errors: [String]
  users: [MyUser]
}

type LoginResult {
  success: Boolean!
  errors: [String]
  user: MyUser
  token: String
}

enum StatusType {
  TODO
  INPROGRESS
  DONE
}

type Task {
  id: ID!
  user_id: Int!
  title: String!
  description: String!
  status: StatusType
  due_date: String!
}

input CreateTaskInput {
  title: String!
  description: String!
  due_date: String!
}

type TaskResult {
  success: Boolean!
  errors: [String]
  task: Task
}

type TasksResult {
  success: Boolean!
  errors: [String]
  tasks: [Task]
}

type Result {
  success: Boolean!
  errors: [String]
}

type Query {
  users: UsersResult!
  login(username: String!, password: String!): LoginResult!

  tasks(status: StatusType, due_date: String): TasksResult!
  task(id: ID!): TaskResult!
}

type Mutation {
  register(name: String!, username: String!, password: String!): LoginResult!
  createTask(task: CreateTaskInput!): TaskResult!
  createTasks(tasks: [CreateTaskInput!]!): TasksResult!
  updateDueDate(id: ID!, newDate: String!): TaskResult!
  updateStatus(id: ID!, newStatus: StatusType!): TaskResult!
  deleteTask(id: ID!): Result!
 
}

